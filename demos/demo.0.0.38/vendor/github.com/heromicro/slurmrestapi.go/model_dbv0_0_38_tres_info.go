/*
Slurm Rest API

API to access and control Slurm.

API version: 0.0.38
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the Dbv0038TresInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbv0038TresInfo{}

// Dbv0038TresInfo struct for Dbv0038TresInfo
type Dbv0038TresInfo struct {
	Meta *Dbv0038Meta `json:"meta,omitempty"`
	// Slurm errors
	Errors []Dbv0038Error `json:"errors,omitempty"`
	// TRES list of attributes
	Tres []Dbv0038TresListInner `json:"tres,omitempty"`
}

// NewDbv0038TresInfo instantiates a new Dbv0038TresInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0038TresInfo() *Dbv0038TresInfo {
	this := Dbv0038TresInfo{}
	return &this
}

// NewDbv0038TresInfoWithDefaults instantiates a new Dbv0038TresInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0038TresInfoWithDefaults() *Dbv0038TresInfo {
	this := Dbv0038TresInfo{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Dbv0038TresInfo) GetMeta() Dbv0038Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Dbv0038Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038TresInfo) GetMetaOk() (*Dbv0038Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Dbv0038TresInfo) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Dbv0038Meta and assigns it to the Meta field.
func (o *Dbv0038TresInfo) SetMeta(v Dbv0038Meta) {
	o.Meta = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Dbv0038TresInfo) GetErrors() []Dbv0038Error {
	if o == nil || IsNil(o.Errors) {
		var ret []Dbv0038Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038TresInfo) GetErrorsOk() ([]Dbv0038Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Dbv0038TresInfo) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Dbv0038Error and assigns it to the Errors field.
func (o *Dbv0038TresInfo) SetErrors(v []Dbv0038Error) {
	o.Errors = v
}

// GetTres returns the Tres field value if set, zero value otherwise.
func (o *Dbv0038TresInfo) GetTres() []Dbv0038TresListInner {
	if o == nil || IsNil(o.Tres) {
		var ret []Dbv0038TresListInner
		return ret
	}
	return o.Tres
}

// GetTresOk returns a tuple with the Tres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038TresInfo) GetTresOk() ([]Dbv0038TresListInner, bool) {
	if o == nil || IsNil(o.Tres) {
		return nil, false
	}
	return o.Tres, true
}

// HasTres returns a boolean if a field has been set.
func (o *Dbv0038TresInfo) HasTres() bool {
	if o != nil && !IsNil(o.Tres) {
		return true
	}

	return false
}

// SetTres gets a reference to the given []Dbv0038TresListInner and assigns it to the Tres field.
func (o *Dbv0038TresInfo) SetTres(v []Dbv0038TresListInner) {
	o.Tres = v
}

func (o Dbv0038TresInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbv0038TresInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Tres) {
		toSerialize["tres"] = o.Tres
	}
	return toSerialize, nil
}

type NullableDbv0038TresInfo struct {
	value *Dbv0038TresInfo
	isSet bool
}

func (v NullableDbv0038TresInfo) Get() *Dbv0038TresInfo {
	return v.value
}

func (v *NullableDbv0038TresInfo) Set(val *Dbv0038TresInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0038TresInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0038TresInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0038TresInfo(val *Dbv0038TresInfo) *NullableDbv0038TresInfo {
	return &NullableDbv0038TresInfo{value: val, isSet: true}
}

func (v NullableDbv0038TresInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0038TresInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


