/*
Slurm Rest API

API to access and control Slurm.

API version: 0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0039MetaSlurm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0039MetaSlurm{}

// V0039MetaSlurm Slurm information
type V0039MetaSlurm struct {
	Version *V0039MetaSlurmVersion `json:"version,omitempty"`
	// version specifier
	Release *string `json:"release,omitempty"`
}

// NewV0039MetaSlurm instantiates a new V0039MetaSlurm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0039MetaSlurm() *V0039MetaSlurm {
	this := V0039MetaSlurm{}
	return &this
}

// NewV0039MetaSlurmWithDefaults instantiates a new V0039MetaSlurm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0039MetaSlurmWithDefaults() *V0039MetaSlurm {
	this := V0039MetaSlurm{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *V0039MetaSlurm) GetVersion() V0039MetaSlurmVersion {
	if o == nil || IsNil(o.Version) {
		var ret V0039MetaSlurmVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039MetaSlurm) GetVersionOk() (*V0039MetaSlurmVersion, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *V0039MetaSlurm) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given V0039MetaSlurmVersion and assigns it to the Version field.
func (o *V0039MetaSlurm) SetVersion(v V0039MetaSlurmVersion) {
	o.Version = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *V0039MetaSlurm) GetRelease() string {
	if o == nil || IsNil(o.Release) {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039MetaSlurm) GetReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *V0039MetaSlurm) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *V0039MetaSlurm) SetRelease(v string) {
	o.Release = &v
}

func (o V0039MetaSlurm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0039MetaSlurm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	return toSerialize, nil
}

type NullableV0039MetaSlurm struct {
	value *V0039MetaSlurm
	isSet bool
}

func (v NullableV0039MetaSlurm) Get() *V0039MetaSlurm {
	return v.value
}

func (v *NullableV0039MetaSlurm) Set(val *V0039MetaSlurm) {
	v.value = val
	v.isSet = true
}

func (v NullableV0039MetaSlurm) IsSet() bool {
	return v.isSet
}

func (v *NullableV0039MetaSlurm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0039MetaSlurm(val *V0039MetaSlurm) *NullableV0039MetaSlurm {
	return &NullableV0039MetaSlurm{value: val, isSet: true}
}

func (v NullableV0039MetaSlurm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0039MetaSlurm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


