/*
Slurm Rest API

API to access and control Slurm.

API version: 0.0.37
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the Dbv0037UserDefault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbv0037UserDefault{}

// Dbv0037UserDefault Default settings
type Dbv0037UserDefault struct {
	// Default account name
	Account *string `json:"account,omitempty"`
	// Default wckey
	Wckey *string `json:"wckey,omitempty"`
}

// NewDbv0037UserDefault instantiates a new Dbv0037UserDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0037UserDefault() *Dbv0037UserDefault {
	this := Dbv0037UserDefault{}
	return &this
}

// NewDbv0037UserDefaultWithDefaults instantiates a new Dbv0037UserDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0037UserDefaultWithDefaults() *Dbv0037UserDefault {
	this := Dbv0037UserDefault{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Dbv0037UserDefault) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037UserDefault) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Dbv0037UserDefault) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *Dbv0037UserDefault) SetAccount(v string) {
	o.Account = &v
}

// GetWckey returns the Wckey field value if set, zero value otherwise.
func (o *Dbv0037UserDefault) GetWckey() string {
	if o == nil || IsNil(o.Wckey) {
		var ret string
		return ret
	}
	return *o.Wckey
}

// GetWckeyOk returns a tuple with the Wckey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037UserDefault) GetWckeyOk() (*string, bool) {
	if o == nil || IsNil(o.Wckey) {
		return nil, false
	}
	return o.Wckey, true
}

// HasWckey returns a boolean if a field has been set.
func (o *Dbv0037UserDefault) HasWckey() bool {
	if o != nil && !IsNil(o.Wckey) {
		return true
	}

	return false
}

// SetWckey gets a reference to the given string and assigns it to the Wckey field.
func (o *Dbv0037UserDefault) SetWckey(v string) {
	o.Wckey = &v
}

func (o Dbv0037UserDefault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbv0037UserDefault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Wckey) {
		toSerialize["wckey"] = o.Wckey
	}
	return toSerialize, nil
}

type NullableDbv0037UserDefault struct {
	value *Dbv0037UserDefault
	isSet bool
}

func (v NullableDbv0037UserDefault) Get() *Dbv0037UserDefault {
	return v.value
}

func (v *NullableDbv0037UserDefault) Set(val *Dbv0037UserDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0037UserDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0037UserDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0037UserDefault(val *Dbv0037UserDefault) *NullableDbv0037UserDefault {
	return &NullableDbv0037UserDefault{value: val, isSet: true}
}

func (v NullableDbv0037UserDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0037UserDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


