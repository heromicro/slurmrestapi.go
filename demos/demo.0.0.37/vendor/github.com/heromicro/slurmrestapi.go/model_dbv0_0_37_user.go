/*
Slurm Rest API

API to access and control Slurm.

API version: 0.0.37
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the Dbv0037User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbv0037User{}

// Dbv0037User User description
type Dbv0037User struct {
	// Description of administrator level
	AdministratorLevel *string `json:"administrator_level,omitempty"`
	Associations *Dbv0037UserAssociations `json:"associations,omitempty"`
	// List of assigned coordinators
	Coordinators []Dbv0037CoordinatorInfo `json:"coordinators,omitempty"`
	Default *Dbv0037UserDefault `json:"default,omitempty"`
	// User name
	Name *string `json:"name,omitempty"`
}

// NewDbv0037User instantiates a new Dbv0037User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0037User() *Dbv0037User {
	this := Dbv0037User{}
	return &this
}

// NewDbv0037UserWithDefaults instantiates a new Dbv0037User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0037UserWithDefaults() *Dbv0037User {
	this := Dbv0037User{}
	return &this
}

// GetAdministratorLevel returns the AdministratorLevel field value if set, zero value otherwise.
func (o *Dbv0037User) GetAdministratorLevel() string {
	if o == nil || IsNil(o.AdministratorLevel) {
		var ret string
		return ret
	}
	return *o.AdministratorLevel
}

// GetAdministratorLevelOk returns a tuple with the AdministratorLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037User) GetAdministratorLevelOk() (*string, bool) {
	if o == nil || IsNil(o.AdministratorLevel) {
		return nil, false
	}
	return o.AdministratorLevel, true
}

// HasAdministratorLevel returns a boolean if a field has been set.
func (o *Dbv0037User) HasAdministratorLevel() bool {
	if o != nil && !IsNil(o.AdministratorLevel) {
		return true
	}

	return false
}

// SetAdministratorLevel gets a reference to the given string and assigns it to the AdministratorLevel field.
func (o *Dbv0037User) SetAdministratorLevel(v string) {
	o.AdministratorLevel = &v
}

// GetAssociations returns the Associations field value if set, zero value otherwise.
func (o *Dbv0037User) GetAssociations() Dbv0037UserAssociations {
	if o == nil || IsNil(o.Associations) {
		var ret Dbv0037UserAssociations
		return ret
	}
	return *o.Associations
}

// GetAssociationsOk returns a tuple with the Associations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037User) GetAssociationsOk() (*Dbv0037UserAssociations, bool) {
	if o == nil || IsNil(o.Associations) {
		return nil, false
	}
	return o.Associations, true
}

// HasAssociations returns a boolean if a field has been set.
func (o *Dbv0037User) HasAssociations() bool {
	if o != nil && !IsNil(o.Associations) {
		return true
	}

	return false
}

// SetAssociations gets a reference to the given Dbv0037UserAssociations and assigns it to the Associations field.
func (o *Dbv0037User) SetAssociations(v Dbv0037UserAssociations) {
	o.Associations = &v
}

// GetCoordinators returns the Coordinators field value if set, zero value otherwise.
func (o *Dbv0037User) GetCoordinators() []Dbv0037CoordinatorInfo {
	if o == nil || IsNil(o.Coordinators) {
		var ret []Dbv0037CoordinatorInfo
		return ret
	}
	return o.Coordinators
}

// GetCoordinatorsOk returns a tuple with the Coordinators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037User) GetCoordinatorsOk() ([]Dbv0037CoordinatorInfo, bool) {
	if o == nil || IsNil(o.Coordinators) {
		return nil, false
	}
	return o.Coordinators, true
}

// HasCoordinators returns a boolean if a field has been set.
func (o *Dbv0037User) HasCoordinators() bool {
	if o != nil && !IsNil(o.Coordinators) {
		return true
	}

	return false
}

// SetCoordinators gets a reference to the given []Dbv0037CoordinatorInfo and assigns it to the Coordinators field.
func (o *Dbv0037User) SetCoordinators(v []Dbv0037CoordinatorInfo) {
	o.Coordinators = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Dbv0037User) GetDefault() Dbv0037UserDefault {
	if o == nil || IsNil(o.Default) {
		var ret Dbv0037UserDefault
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037User) GetDefaultOk() (*Dbv0037UserDefault, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Dbv0037User) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given Dbv0037UserDefault and assigns it to the Default field.
func (o *Dbv0037User) SetDefault(v Dbv0037UserDefault) {
	o.Default = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Dbv0037User) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0037User) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Dbv0037User) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Dbv0037User) SetName(v string) {
	o.Name = &v
}

func (o Dbv0037User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbv0037User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdministratorLevel) {
		toSerialize["administrator_level"] = o.AdministratorLevel
	}
	if !IsNil(o.Associations) {
		toSerialize["associations"] = o.Associations
	}
	if !IsNil(o.Coordinators) {
		toSerialize["coordinators"] = o.Coordinators
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableDbv0037User struct {
	value *Dbv0037User
	isSet bool
}

func (v NullableDbv0037User) Get() *Dbv0037User {
	return v.value
}

func (v *NullableDbv0037User) Set(val *Dbv0037User) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0037User) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0037User) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0037User(val *Dbv0037User) *NullableDbv0037User {
	return &NullableDbv0037User{value: val, isSet: true}
}

func (v NullableDbv0037User) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0037User) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


