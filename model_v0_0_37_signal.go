/*
Slurm Rest API

API to access and control Slurm.

API version: 0.0.37
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
	"fmt"
)

// V0037Signal POSIX signal name
type V0037Signal int32

// List of v0.0.37_signal
const (
	HUP V0037Signal = "HUP"
	INT V0037Signal = "INT"
	QUIT V0037Signal = "QUIT"
	ABRT V0037Signal = "ABRT"
	KILL V0037Signal = "KILL"
	ALRM V0037Signal = "ALRM"
	TERM V0037Signal = "TERM"
	USR1 V0037Signal = "USR1"
	USR2 V0037Signal = "USR2"
	URG V0037Signal = "URG"
	CONT V0037Signal = "CONT"
	STOP V0037Signal = "STOP"
	TSTP V0037Signal = "TSTP"
	TTIN V0037Signal = "TTIN"
	TTOU V0037Signal = "TTOU"
)

// All allowed values of V0037Signal enum
var AllowedV0037SignalEnumValues = []V0037Signal{
	"HUP",
	"INT",
	"QUIT",
	"ABRT",
	"KILL",
	"ALRM",
	"TERM",
	"USR1",
	"USR2",
	"URG",
	"CONT",
	"STOP",
	"TSTP",
	"TTIN",
	"TTOU",
}

func (v *V0037Signal) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V0037Signal(value)
	for _, existing := range AllowedV0037SignalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V0037Signal", value)
}

// NewV0037SignalFromValue returns a pointer to a valid V0037Signal
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV0037SignalFromValue(v int32) (*V0037Signal, error) {
	ev := V0037Signal(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V0037Signal: valid values are %v", v, AllowedV0037SignalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V0037Signal) IsValid() bool {
	for _, existing := range AllowedV0037SignalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v0.0.37_signal value
func (v V0037Signal) Ptr() *V0037Signal {
	return &v
}

type NullableV0037Signal struct {
	value *V0037Signal
	isSet bool
}

func (v NullableV0037Signal) Get() *V0037Signal {
	return v.value
}

func (v *NullableV0037Signal) Set(val *V0037Signal) {
	v.value = val
	v.isSet = true
}

func (v NullableV0037Signal) IsSet() bool {
	return v.isSet
}

func (v *NullableV0037Signal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0037Signal(val *V0037Signal) *NullableV0037Signal {
	return &NullableV0037Signal{value: val, isSet: true}
}

func (v NullableV0037Signal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0037Signal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

