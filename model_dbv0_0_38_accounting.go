/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the Dbv0038Accounting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbv0038Accounting{}

// Dbv0038Accounting struct for Dbv0038Accounting
type Dbv0038Accounting struct {
	// total seconds allocated
	Allocated *int32 `json:"allocated,omitempty"`
	// association/wckey ID
	Id *int32 `json:"id,omitempty"`
	// UNIX timestamp when accounting period started
	Start *int32 `json:"start,omitempty"`
	// TRES list of attributes
	TRES []Dbv0038TresListInner `json:"TRES,omitempty"`
}

// NewDbv0038Accounting instantiates a new Dbv0038Accounting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0038Accounting() *Dbv0038Accounting {
	this := Dbv0038Accounting{}
	return &this
}

// NewDbv0038AccountingWithDefaults instantiates a new Dbv0038Accounting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0038AccountingWithDefaults() *Dbv0038Accounting {
	this := Dbv0038Accounting{}
	return &this
}

// GetAllocated returns the Allocated field value if set, zero value otherwise.
func (o *Dbv0038Accounting) GetAllocated() int32 {
	if o == nil || IsNil(o.Allocated) {
		var ret int32
		return ret
	}
	return *o.Allocated
}

// GetAllocatedOk returns a tuple with the Allocated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038Accounting) GetAllocatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Allocated) {
		return nil, false
	}
	return o.Allocated, true
}

// HasAllocated returns a boolean if a field has been set.
func (o *Dbv0038Accounting) HasAllocated() bool {
	if o != nil && !IsNil(o.Allocated) {
		return true
	}

	return false
}

// SetAllocated gets a reference to the given int32 and assigns it to the Allocated field.
func (o *Dbv0038Accounting) SetAllocated(v int32) {
	o.Allocated = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Dbv0038Accounting) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038Accounting) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Dbv0038Accounting) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Dbv0038Accounting) SetId(v int32) {
	o.Id = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Dbv0038Accounting) GetStart() int32 {
	if o == nil || IsNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038Accounting) GetStartOk() (*int32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Dbv0038Accounting) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *Dbv0038Accounting) SetStart(v int32) {
	o.Start = &v
}

// GetTRES returns the TRES field value if set, zero value otherwise.
func (o *Dbv0038Accounting) GetTRES() []Dbv0038TresListInner {
	if o == nil || IsNil(o.TRES) {
		var ret []Dbv0038TresListInner
		return ret
	}
	return o.TRES
}

// GetTRESOk returns a tuple with the TRES field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038Accounting) GetTRESOk() ([]Dbv0038TresListInner, bool) {
	if o == nil || IsNil(o.TRES) {
		return nil, false
	}
	return o.TRES, true
}

// HasTRES returns a boolean if a field has been set.
func (o *Dbv0038Accounting) HasTRES() bool {
	if o != nil && !IsNil(o.TRES) {
		return true
	}

	return false
}

// SetTRES gets a reference to the given []Dbv0038TresListInner and assigns it to the TRES field.
func (o *Dbv0038Accounting) SetTRES(v []Dbv0038TresListInner) {
	o.TRES = v
}

func (o Dbv0038Accounting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbv0038Accounting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allocated) {
		toSerialize["allocated"] = o.Allocated
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.TRES) {
		toSerialize["TRES"] = o.TRES
	}
	return toSerialize, nil
}

type NullableDbv0038Accounting struct {
	value *Dbv0038Accounting
	isSet bool
}

func (v NullableDbv0038Accounting) Get() *Dbv0038Accounting {
	return v.value
}

func (v *NullableDbv0038Accounting) Set(val *Dbv0038Accounting) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0038Accounting) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0038Accounting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0038Accounting(val *Dbv0038Accounting) *NullableDbv0038Accounting {
	return &NullableDbv0038Accounting{value: val, isSet: true}
}

func (v NullableDbv0038Accounting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0038Accounting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


