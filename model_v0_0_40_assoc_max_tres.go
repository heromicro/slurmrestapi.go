/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0040AssocMaxTres type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0040AssocMaxTres{}

// V0040AssocMaxTres struct for V0040AssocMaxTres
type V0040AssocMaxTres struct {
	Total []V0040Tres `json:"total,omitempty"`
	Group *V0040AssocMaxTresGroup `json:"group,omitempty"`
	Minutes *V0040AssocMaxTresMinutes `json:"minutes,omitempty"`
	Per *V0040AssocMaxTresPer `json:"per,omitempty"`
}

// NewV0040AssocMaxTres instantiates a new V0040AssocMaxTres object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0040AssocMaxTres() *V0040AssocMaxTres {
	this := V0040AssocMaxTres{}
	return &this
}

// NewV0040AssocMaxTresWithDefaults instantiates a new V0040AssocMaxTres object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0040AssocMaxTresWithDefaults() *V0040AssocMaxTres {
	this := V0040AssocMaxTres{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *V0040AssocMaxTres) GetTotal() []V0040Tres {
	if o == nil || IsNil(o.Total) {
		var ret []V0040Tres
		return ret
	}
	return o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040AssocMaxTres) GetTotalOk() ([]V0040Tres, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *V0040AssocMaxTres) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given []V0040Tres and assigns it to the Total field.
func (o *V0040AssocMaxTres) SetTotal(v []V0040Tres) {
	o.Total = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *V0040AssocMaxTres) GetGroup() V0040AssocMaxTresGroup {
	if o == nil || IsNil(o.Group) {
		var ret V0040AssocMaxTresGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040AssocMaxTres) GetGroupOk() (*V0040AssocMaxTresGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *V0040AssocMaxTres) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given V0040AssocMaxTresGroup and assigns it to the Group field.
func (o *V0040AssocMaxTres) SetGroup(v V0040AssocMaxTresGroup) {
	o.Group = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *V0040AssocMaxTres) GetMinutes() V0040AssocMaxTresMinutes {
	if o == nil || IsNil(o.Minutes) {
		var ret V0040AssocMaxTresMinutes
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040AssocMaxTres) GetMinutesOk() (*V0040AssocMaxTresMinutes, bool) {
	if o == nil || IsNil(o.Minutes) {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *V0040AssocMaxTres) HasMinutes() bool {
	if o != nil && !IsNil(o.Minutes) {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given V0040AssocMaxTresMinutes and assigns it to the Minutes field.
func (o *V0040AssocMaxTres) SetMinutes(v V0040AssocMaxTresMinutes) {
	o.Minutes = &v
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *V0040AssocMaxTres) GetPer() V0040AssocMaxTresPer {
	if o == nil || IsNil(o.Per) {
		var ret V0040AssocMaxTresPer
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040AssocMaxTres) GetPerOk() (*V0040AssocMaxTresPer, bool) {
	if o == nil || IsNil(o.Per) {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *V0040AssocMaxTres) HasPer() bool {
	if o != nil && !IsNil(o.Per) {
		return true
	}

	return false
}

// SetPer gets a reference to the given V0040AssocMaxTresPer and assigns it to the Per field.
func (o *V0040AssocMaxTres) SetPer(v V0040AssocMaxTresPer) {
	o.Per = &v
}

func (o V0040AssocMaxTres) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0040AssocMaxTres) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Minutes) {
		toSerialize["minutes"] = o.Minutes
	}
	if !IsNil(o.Per) {
		toSerialize["per"] = o.Per
	}
	return toSerialize, nil
}

type NullableV0040AssocMaxTres struct {
	value *V0040AssocMaxTres
	isSet bool
}

func (v NullableV0040AssocMaxTres) Get() *V0040AssocMaxTres {
	return v.value
}

func (v *NullableV0040AssocMaxTres) Set(val *V0040AssocMaxTres) {
	v.value = val
	v.isSet = true
}

func (v NullableV0040AssocMaxTres) IsSet() bool {
	return v.isSet
}

func (v *NullableV0040AssocMaxTres) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0040AssocMaxTres(val *V0040AssocMaxTres) *NullableV0040AssocMaxTres {
	return &NullableV0040AssocMaxTres{value: val, isSet: true}
}

func (v NullableV0040AssocMaxTres) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0040AssocMaxTres) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


