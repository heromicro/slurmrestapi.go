/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the Dbv0038TresUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbv0038TresUpdate{}

// Dbv0038TresUpdate struct for Dbv0038TresUpdate
type Dbv0038TresUpdate struct {
	// TRES list of attributes
	Tres []Dbv0038TresListInner `json:"tres,omitempty"`
}

// NewDbv0038TresUpdate instantiates a new Dbv0038TresUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0038TresUpdate() *Dbv0038TresUpdate {
	this := Dbv0038TresUpdate{}
	return &this
}

// NewDbv0038TresUpdateWithDefaults instantiates a new Dbv0038TresUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0038TresUpdateWithDefaults() *Dbv0038TresUpdate {
	this := Dbv0038TresUpdate{}
	return &this
}

// GetTres returns the Tres field value if set, zero value otherwise.
func (o *Dbv0038TresUpdate) GetTres() []Dbv0038TresListInner {
	if o == nil || IsNil(o.Tres) {
		var ret []Dbv0038TresListInner
		return ret
	}
	return o.Tres
}

// GetTresOk returns a tuple with the Tres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038TresUpdate) GetTresOk() ([]Dbv0038TresListInner, bool) {
	if o == nil || IsNil(o.Tres) {
		return nil, false
	}
	return o.Tres, true
}

// HasTres returns a boolean if a field has been set.
func (o *Dbv0038TresUpdate) HasTres() bool {
	if o != nil && !IsNil(o.Tres) {
		return true
	}

	return false
}

// SetTres gets a reference to the given []Dbv0038TresListInner and assigns it to the Tres field.
func (o *Dbv0038TresUpdate) SetTres(v []Dbv0038TresListInner) {
	o.Tres = v
}

func (o Dbv0038TresUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbv0038TresUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tres) {
		toSerialize["tres"] = o.Tres
	}
	return toSerialize, nil
}

type NullableDbv0038TresUpdate struct {
	value *Dbv0038TresUpdate
	isSet bool
}

func (v NullableDbv0038TresUpdate) Get() *Dbv0038TresUpdate {
	return v.value
}

func (v *NullableDbv0038TresUpdate) Set(val *Dbv0038TresUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0038TresUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0038TresUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0038TresUpdate(val *Dbv0038TresUpdate) *NullableDbv0038TresUpdate {
	return &NullableDbv0038TresUpdate{value: val, isSet: true}
}

func (v NullableDbv0038TresUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0038TresUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


