/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0040PartitionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0040PartitionInfo{}

// V0040PartitionInfo struct for V0040PartitionInfo
type V0040PartitionInfo struct {
	Nodes *V0039PartitionInfoNodes `json:"nodes,omitempty"`
	Accounts *V0039PartitionInfoAccounts `json:"accounts,omitempty"`
	Groups *V0039PartitionInfoGroups `json:"groups,omitempty"`
	Qos *V0039PartitionInfoQos `json:"qos,omitempty"`
	Alternate *string `json:"alternate,omitempty"`
	Tres *V0039PartitionInfoTres `json:"tres,omitempty"`
	Cluster *string `json:"cluster,omitempty"`
	Cpus *V0039PartitionInfoCpus `json:"cpus,omitempty"`
	Defaults *V0040PartitionInfoDefaults `json:"defaults,omitempty"`
	GraceTime *int32 `json:"grace_time,omitempty"`
	Maximums *V0040PartitionInfoMaximums `json:"maximums,omitempty"`
	Minimums *V0039PartitionInfoMinimums `json:"minimums,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeSets *string `json:"node_sets,omitempty"`
	Priority *V0039PartitionInfoPriority `json:"priority,omitempty"`
	Timeouts *V0040PartitionInfoTimeouts `json:"timeouts,omitempty"`
	Partition *V0040PartitionInfoPartition `json:"partition,omitempty"`
	SuspendTime *V0040Uint32NoVal `json:"suspend_time,omitempty"`
}

// NewV0040PartitionInfo instantiates a new V0040PartitionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0040PartitionInfo() *V0040PartitionInfo {
	this := V0040PartitionInfo{}
	return &this
}

// NewV0040PartitionInfoWithDefaults instantiates a new V0040PartitionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0040PartitionInfoWithDefaults() *V0040PartitionInfo {
	this := V0040PartitionInfo{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetNodes() V0039PartitionInfoNodes {
	if o == nil || IsNil(o.Nodes) {
		var ret V0039PartitionInfoNodes
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetNodesOk() (*V0039PartitionInfoNodes, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given V0039PartitionInfoNodes and assigns it to the Nodes field.
func (o *V0040PartitionInfo) SetNodes(v V0039PartitionInfoNodes) {
	o.Nodes = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetAccounts() V0039PartitionInfoAccounts {
	if o == nil || IsNil(o.Accounts) {
		var ret V0039PartitionInfoAccounts
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetAccountsOk() (*V0039PartitionInfoAccounts, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given V0039PartitionInfoAccounts and assigns it to the Accounts field.
func (o *V0040PartitionInfo) SetAccounts(v V0039PartitionInfoAccounts) {
	o.Accounts = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetGroups() V0039PartitionInfoGroups {
	if o == nil || IsNil(o.Groups) {
		var ret V0039PartitionInfoGroups
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetGroupsOk() (*V0039PartitionInfoGroups, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given V0039PartitionInfoGroups and assigns it to the Groups field.
func (o *V0040PartitionInfo) SetGroups(v V0039PartitionInfoGroups) {
	o.Groups = &v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetQos() V0039PartitionInfoQos {
	if o == nil || IsNil(o.Qos) {
		var ret V0039PartitionInfoQos
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetQosOk() (*V0039PartitionInfoQos, bool) {
	if o == nil || IsNil(o.Qos) {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasQos() bool {
	if o != nil && !IsNil(o.Qos) {
		return true
	}

	return false
}

// SetQos gets a reference to the given V0039PartitionInfoQos and assigns it to the Qos field.
func (o *V0040PartitionInfo) SetQos(v V0039PartitionInfoQos) {
	o.Qos = &v
}

// GetAlternate returns the Alternate field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetAlternate() string {
	if o == nil || IsNil(o.Alternate) {
		var ret string
		return ret
	}
	return *o.Alternate
}

// GetAlternateOk returns a tuple with the Alternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetAlternateOk() (*string, bool) {
	if o == nil || IsNil(o.Alternate) {
		return nil, false
	}
	return o.Alternate, true
}

// HasAlternate returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasAlternate() bool {
	if o != nil && !IsNil(o.Alternate) {
		return true
	}

	return false
}

// SetAlternate gets a reference to the given string and assigns it to the Alternate field.
func (o *V0040PartitionInfo) SetAlternate(v string) {
	o.Alternate = &v
}

// GetTres returns the Tres field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetTres() V0039PartitionInfoTres {
	if o == nil || IsNil(o.Tres) {
		var ret V0039PartitionInfoTres
		return ret
	}
	return *o.Tres
}

// GetTresOk returns a tuple with the Tres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetTresOk() (*V0039PartitionInfoTres, bool) {
	if o == nil || IsNil(o.Tres) {
		return nil, false
	}
	return o.Tres, true
}

// HasTres returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasTres() bool {
	if o != nil && !IsNil(o.Tres) {
		return true
	}

	return false
}

// SetTres gets a reference to the given V0039PartitionInfoTres and assigns it to the Tres field.
func (o *V0040PartitionInfo) SetTres(v V0039PartitionInfoTres) {
	o.Tres = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *V0040PartitionInfo) SetCluster(v string) {
	o.Cluster = &v
}

// GetCpus returns the Cpus field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetCpus() V0039PartitionInfoCpus {
	if o == nil || IsNil(o.Cpus) {
		var ret V0039PartitionInfoCpus
		return ret
	}
	return *o.Cpus
}

// GetCpusOk returns a tuple with the Cpus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetCpusOk() (*V0039PartitionInfoCpus, bool) {
	if o == nil || IsNil(o.Cpus) {
		return nil, false
	}
	return o.Cpus, true
}

// HasCpus returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasCpus() bool {
	if o != nil && !IsNil(o.Cpus) {
		return true
	}

	return false
}

// SetCpus gets a reference to the given V0039PartitionInfoCpus and assigns it to the Cpus field.
func (o *V0040PartitionInfo) SetCpus(v V0039PartitionInfoCpus) {
	o.Cpus = &v
}

// GetDefaults returns the Defaults field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetDefaults() V0040PartitionInfoDefaults {
	if o == nil || IsNil(o.Defaults) {
		var ret V0040PartitionInfoDefaults
		return ret
	}
	return *o.Defaults
}

// GetDefaultsOk returns a tuple with the Defaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetDefaultsOk() (*V0040PartitionInfoDefaults, bool) {
	if o == nil || IsNil(o.Defaults) {
		return nil, false
	}
	return o.Defaults, true
}

// HasDefaults returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasDefaults() bool {
	if o != nil && !IsNil(o.Defaults) {
		return true
	}

	return false
}

// SetDefaults gets a reference to the given V0040PartitionInfoDefaults and assigns it to the Defaults field.
func (o *V0040PartitionInfo) SetDefaults(v V0040PartitionInfoDefaults) {
	o.Defaults = &v
}

// GetGraceTime returns the GraceTime field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetGraceTime() int32 {
	if o == nil || IsNil(o.GraceTime) {
		var ret int32
		return ret
	}
	return *o.GraceTime
}

// GetGraceTimeOk returns a tuple with the GraceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetGraceTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.GraceTime) {
		return nil, false
	}
	return o.GraceTime, true
}

// HasGraceTime returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasGraceTime() bool {
	if o != nil && !IsNil(o.GraceTime) {
		return true
	}

	return false
}

// SetGraceTime gets a reference to the given int32 and assigns it to the GraceTime field.
func (o *V0040PartitionInfo) SetGraceTime(v int32) {
	o.GraceTime = &v
}

// GetMaximums returns the Maximums field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetMaximums() V0040PartitionInfoMaximums {
	if o == nil || IsNil(o.Maximums) {
		var ret V0040PartitionInfoMaximums
		return ret
	}
	return *o.Maximums
}

// GetMaximumsOk returns a tuple with the Maximums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetMaximumsOk() (*V0040PartitionInfoMaximums, bool) {
	if o == nil || IsNil(o.Maximums) {
		return nil, false
	}
	return o.Maximums, true
}

// HasMaximums returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasMaximums() bool {
	if o != nil && !IsNil(o.Maximums) {
		return true
	}

	return false
}

// SetMaximums gets a reference to the given V0040PartitionInfoMaximums and assigns it to the Maximums field.
func (o *V0040PartitionInfo) SetMaximums(v V0040PartitionInfoMaximums) {
	o.Maximums = &v
}

// GetMinimums returns the Minimums field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetMinimums() V0039PartitionInfoMinimums {
	if o == nil || IsNil(o.Minimums) {
		var ret V0039PartitionInfoMinimums
		return ret
	}
	return *o.Minimums
}

// GetMinimumsOk returns a tuple with the Minimums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetMinimumsOk() (*V0039PartitionInfoMinimums, bool) {
	if o == nil || IsNil(o.Minimums) {
		return nil, false
	}
	return o.Minimums, true
}

// HasMinimums returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasMinimums() bool {
	if o != nil && !IsNil(o.Minimums) {
		return true
	}

	return false
}

// SetMinimums gets a reference to the given V0039PartitionInfoMinimums and assigns it to the Minimums field.
func (o *V0040PartitionInfo) SetMinimums(v V0039PartitionInfoMinimums) {
	o.Minimums = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V0040PartitionInfo) SetName(v string) {
	o.Name = &v
}

// GetNodeSets returns the NodeSets field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetNodeSets() string {
	if o == nil || IsNil(o.NodeSets) {
		var ret string
		return ret
	}
	return *o.NodeSets
}

// GetNodeSetsOk returns a tuple with the NodeSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetNodeSetsOk() (*string, bool) {
	if o == nil || IsNil(o.NodeSets) {
		return nil, false
	}
	return o.NodeSets, true
}

// HasNodeSets returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasNodeSets() bool {
	if o != nil && !IsNil(o.NodeSets) {
		return true
	}

	return false
}

// SetNodeSets gets a reference to the given string and assigns it to the NodeSets field.
func (o *V0040PartitionInfo) SetNodeSets(v string) {
	o.NodeSets = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetPriority() V0039PartitionInfoPriority {
	if o == nil || IsNil(o.Priority) {
		var ret V0039PartitionInfoPriority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetPriorityOk() (*V0039PartitionInfoPriority, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given V0039PartitionInfoPriority and assigns it to the Priority field.
func (o *V0040PartitionInfo) SetPriority(v V0039PartitionInfoPriority) {
	o.Priority = &v
}

// GetTimeouts returns the Timeouts field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetTimeouts() V0040PartitionInfoTimeouts {
	if o == nil || IsNil(o.Timeouts) {
		var ret V0040PartitionInfoTimeouts
		return ret
	}
	return *o.Timeouts
}

// GetTimeoutsOk returns a tuple with the Timeouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetTimeoutsOk() (*V0040PartitionInfoTimeouts, bool) {
	if o == nil || IsNil(o.Timeouts) {
		return nil, false
	}
	return o.Timeouts, true
}

// HasTimeouts returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasTimeouts() bool {
	if o != nil && !IsNil(o.Timeouts) {
		return true
	}

	return false
}

// SetTimeouts gets a reference to the given V0040PartitionInfoTimeouts and assigns it to the Timeouts field.
func (o *V0040PartitionInfo) SetTimeouts(v V0040PartitionInfoTimeouts) {
	o.Timeouts = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetPartition() V0040PartitionInfoPartition {
	if o == nil || IsNil(o.Partition) {
		var ret V0040PartitionInfoPartition
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetPartitionOk() (*V0040PartitionInfoPartition, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given V0040PartitionInfoPartition and assigns it to the Partition field.
func (o *V0040PartitionInfo) SetPartition(v V0040PartitionInfoPartition) {
	o.Partition = &v
}

// GetSuspendTime returns the SuspendTime field value if set, zero value otherwise.
func (o *V0040PartitionInfo) GetSuspendTime() V0040Uint32NoVal {
	if o == nil || IsNil(o.SuspendTime) {
		var ret V0040Uint32NoVal
		return ret
	}
	return *o.SuspendTime
}

// GetSuspendTimeOk returns a tuple with the SuspendTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfo) GetSuspendTimeOk() (*V0040Uint32NoVal, bool) {
	if o == nil || IsNil(o.SuspendTime) {
		return nil, false
	}
	return o.SuspendTime, true
}

// HasSuspendTime returns a boolean if a field has been set.
func (o *V0040PartitionInfo) HasSuspendTime() bool {
	if o != nil && !IsNil(o.SuspendTime) {
		return true
	}

	return false
}

// SetSuspendTime gets a reference to the given V0040Uint32NoVal and assigns it to the SuspendTime field.
func (o *V0040PartitionInfo) SetSuspendTime(v V0040Uint32NoVal) {
	o.SuspendTime = &v
}

func (o V0040PartitionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0040PartitionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.Qos) {
		toSerialize["qos"] = o.Qos
	}
	if !IsNil(o.Alternate) {
		toSerialize["alternate"] = o.Alternate
	}
	if !IsNil(o.Tres) {
		toSerialize["tres"] = o.Tres
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Cpus) {
		toSerialize["cpus"] = o.Cpus
	}
	if !IsNil(o.Defaults) {
		toSerialize["defaults"] = o.Defaults
	}
	if !IsNil(o.GraceTime) {
		toSerialize["grace_time"] = o.GraceTime
	}
	if !IsNil(o.Maximums) {
		toSerialize["maximums"] = o.Maximums
	}
	if !IsNil(o.Minimums) {
		toSerialize["minimums"] = o.Minimums
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodeSets) {
		toSerialize["node_sets"] = o.NodeSets
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Timeouts) {
		toSerialize["timeouts"] = o.Timeouts
	}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	if !IsNil(o.SuspendTime) {
		toSerialize["suspend_time"] = o.SuspendTime
	}
	return toSerialize, nil
}

type NullableV0040PartitionInfo struct {
	value *V0040PartitionInfo
	isSet bool
}

func (v NullableV0040PartitionInfo) Get() *V0040PartitionInfo {
	return v.value
}

func (v *NullableV0040PartitionInfo) Set(val *V0040PartitionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableV0040PartitionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableV0040PartitionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0040PartitionInfo(val *V0040PartitionInfo) *NullableV0040PartitionInfo {
	return &NullableV0040PartitionInfo{value: val, isSet: true}
}

func (v NullableV0040PartitionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0040PartitionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


