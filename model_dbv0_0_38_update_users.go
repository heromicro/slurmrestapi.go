/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the Dbv0038UpdateUsers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbv0038UpdateUsers{}

// Dbv0038UpdateUsers struct for Dbv0038UpdateUsers
type Dbv0038UpdateUsers struct {
	Users []Dbv0038User `json:"users,omitempty"`
}

// NewDbv0038UpdateUsers instantiates a new Dbv0038UpdateUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0038UpdateUsers() *Dbv0038UpdateUsers {
	this := Dbv0038UpdateUsers{}
	return &this
}

// NewDbv0038UpdateUsersWithDefaults instantiates a new Dbv0038UpdateUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0038UpdateUsersWithDefaults() *Dbv0038UpdateUsers {
	this := Dbv0038UpdateUsers{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *Dbv0038UpdateUsers) GetUsers() []Dbv0038User {
	if o == nil || IsNil(o.Users) {
		var ret []Dbv0038User
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038UpdateUsers) GetUsersOk() ([]Dbv0038User, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *Dbv0038UpdateUsers) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []Dbv0038User and assigns it to the Users field.
func (o *Dbv0038UpdateUsers) SetUsers(v []Dbv0038User) {
	o.Users = v
}

func (o Dbv0038UpdateUsers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbv0038UpdateUsers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableDbv0038UpdateUsers struct {
	value *Dbv0038UpdateUsers
	isSet bool
}

func (v NullableDbv0038UpdateUsers) Get() *Dbv0038UpdateUsers {
	return v.value
}

func (v *NullableDbv0038UpdateUsers) Set(val *Dbv0038UpdateUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0038UpdateUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0038UpdateUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0038UpdateUsers(val *Dbv0038UpdateUsers) *NullableDbv0038UpdateUsers {
	return &NullableDbv0038UpdateUsers{value: val, isSet: true}
}

func (v NullableDbv0038UpdateUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0038UpdateUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


