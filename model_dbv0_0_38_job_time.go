/*
Slurm Rest API

API to access and control Slurm.

API version: 0.0.38
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the Dbv0038JobTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dbv0038JobTime{}

// Dbv0038JobTime Time properties
type Dbv0038JobTime struct {
	// Total time elapsed
	Elapsed *int32 `json:"elapsed,omitempty"`
	// Total time eligible to run
	Eligible *int32 `json:"eligible,omitempty"`
	// Timestamp of when job ended
	End *int32 `json:"end,omitempty"`
	// Timestamp of when job started
	Start *int32 `json:"start,omitempty"`
	// Timestamp of when job submitted
	Submission *int32 `json:"submission,omitempty"`
	// Timestamp of when job last suspended
	Suspended *int32 `json:"suspended,omitempty"`
	System *Dbv0038JobTimeSystem `json:"system,omitempty"`
	Total *Dbv0038JobTimeTotal `json:"total,omitempty"`
	User *Dbv0038JobTimeUser `json:"user,omitempty"`
	// Job wall clock time limit
	Limit *int32 `json:"limit,omitempty"`
}

// NewDbv0038JobTime instantiates a new Dbv0038JobTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbv0038JobTime() *Dbv0038JobTime {
	this := Dbv0038JobTime{}
	return &this
}

// NewDbv0038JobTimeWithDefaults instantiates a new Dbv0038JobTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbv0038JobTimeWithDefaults() *Dbv0038JobTime {
	this := Dbv0038JobTime{}
	return &this
}

// GetElapsed returns the Elapsed field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetElapsed() int32 {
	if o == nil || IsNil(o.Elapsed) {
		var ret int32
		return ret
	}
	return *o.Elapsed
}

// GetElapsedOk returns a tuple with the Elapsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetElapsedOk() (*int32, bool) {
	if o == nil || IsNil(o.Elapsed) {
		return nil, false
	}
	return o.Elapsed, true
}

// HasElapsed returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasElapsed() bool {
	if o != nil && !IsNil(o.Elapsed) {
		return true
	}

	return false
}

// SetElapsed gets a reference to the given int32 and assigns it to the Elapsed field.
func (o *Dbv0038JobTime) SetElapsed(v int32) {
	o.Elapsed = &v
}

// GetEligible returns the Eligible field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetEligible() int32 {
	if o == nil || IsNil(o.Eligible) {
		var ret int32
		return ret
	}
	return *o.Eligible
}

// GetEligibleOk returns a tuple with the Eligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetEligibleOk() (*int32, bool) {
	if o == nil || IsNil(o.Eligible) {
		return nil, false
	}
	return o.Eligible, true
}

// HasEligible returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasEligible() bool {
	if o != nil && !IsNil(o.Eligible) {
		return true
	}

	return false
}

// SetEligible gets a reference to the given int32 and assigns it to the Eligible field.
func (o *Dbv0038JobTime) SetEligible(v int32) {
	o.Eligible = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetEnd() int32 {
	if o == nil || IsNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetEndOk() (*int32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *Dbv0038JobTime) SetEnd(v int32) {
	o.End = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetStart() int32 {
	if o == nil || IsNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetStartOk() (*int32, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *Dbv0038JobTime) SetStart(v int32) {
	o.Start = &v
}

// GetSubmission returns the Submission field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetSubmission() int32 {
	if o == nil || IsNil(o.Submission) {
		var ret int32
		return ret
	}
	return *o.Submission
}

// GetSubmissionOk returns a tuple with the Submission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetSubmissionOk() (*int32, bool) {
	if o == nil || IsNil(o.Submission) {
		return nil, false
	}
	return o.Submission, true
}

// HasSubmission returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasSubmission() bool {
	if o != nil && !IsNil(o.Submission) {
		return true
	}

	return false
}

// SetSubmission gets a reference to the given int32 and assigns it to the Submission field.
func (o *Dbv0038JobTime) SetSubmission(v int32) {
	o.Submission = &v
}

// GetSuspended returns the Suspended field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetSuspended() int32 {
	if o == nil || IsNil(o.Suspended) {
		var ret int32
		return ret
	}
	return *o.Suspended
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetSuspendedOk() (*int32, bool) {
	if o == nil || IsNil(o.Suspended) {
		return nil, false
	}
	return o.Suspended, true
}

// HasSuspended returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasSuspended() bool {
	if o != nil && !IsNil(o.Suspended) {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given int32 and assigns it to the Suspended field.
func (o *Dbv0038JobTime) SetSuspended(v int32) {
	o.Suspended = &v
}

// GetSystem returns the System field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetSystem() Dbv0038JobTimeSystem {
	if o == nil || IsNil(o.System) {
		var ret Dbv0038JobTimeSystem
		return ret
	}
	return *o.System
}

// GetSystemOk returns a tuple with the System field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetSystemOk() (*Dbv0038JobTimeSystem, bool) {
	if o == nil || IsNil(o.System) {
		return nil, false
	}
	return o.System, true
}

// HasSystem returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasSystem() bool {
	if o != nil && !IsNil(o.System) {
		return true
	}

	return false
}

// SetSystem gets a reference to the given Dbv0038JobTimeSystem and assigns it to the System field.
func (o *Dbv0038JobTime) SetSystem(v Dbv0038JobTimeSystem) {
	o.System = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetTotal() Dbv0038JobTimeTotal {
	if o == nil || IsNil(o.Total) {
		var ret Dbv0038JobTimeTotal
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetTotalOk() (*Dbv0038JobTimeTotal, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given Dbv0038JobTimeTotal and assigns it to the Total field.
func (o *Dbv0038JobTime) SetTotal(v Dbv0038JobTimeTotal) {
	o.Total = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetUser() Dbv0038JobTimeUser {
	if o == nil || IsNil(o.User) {
		var ret Dbv0038JobTimeUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetUserOk() (*Dbv0038JobTimeUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given Dbv0038JobTimeUser and assigns it to the User field.
func (o *Dbv0038JobTime) SetUser(v Dbv0038JobTimeUser) {
	o.User = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *Dbv0038JobTime) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dbv0038JobTime) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *Dbv0038JobTime) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *Dbv0038JobTime) SetLimit(v int32) {
	o.Limit = &v
}

func (o Dbv0038JobTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dbv0038JobTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Elapsed) {
		toSerialize["elapsed"] = o.Elapsed
	}
	if !IsNil(o.Eligible) {
		toSerialize["eligible"] = o.Eligible
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Submission) {
		toSerialize["submission"] = o.Submission
	}
	if !IsNil(o.Suspended) {
		toSerialize["suspended"] = o.Suspended
	}
	if !IsNil(o.System) {
		toSerialize["system"] = o.System
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

type NullableDbv0038JobTime struct {
	value *Dbv0038JobTime
	isSet bool
}

func (v NullableDbv0038JobTime) Get() *Dbv0038JobTime {
	return v.value
}

func (v *NullableDbv0038JobTime) Set(val *Dbv0038JobTime) {
	v.value = val
	v.isSet = true
}

func (v NullableDbv0038JobTime) IsSet() bool {
	return v.isSet
}

func (v *NullableDbv0038JobTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbv0038JobTime(val *Dbv0038JobTime) *NullableDbv0038JobTime {
	return &NullableDbv0038JobTime{value: val, isSet: true}
}

func (v NullableDbv0038JobTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbv0038JobTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


