/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0040InstanceTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0040InstanceTime{}

// V0040InstanceTime struct for V0040InstanceTime
type V0040InstanceTime struct {
	TimeEnd *int64 `json:"time_end,omitempty"`
	TimeStart *int64 `json:"time_start,omitempty"`
}

// NewV0040InstanceTime instantiates a new V0040InstanceTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0040InstanceTime() *V0040InstanceTime {
	this := V0040InstanceTime{}
	return &this
}

// NewV0040InstanceTimeWithDefaults instantiates a new V0040InstanceTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0040InstanceTimeWithDefaults() *V0040InstanceTime {
	this := V0040InstanceTime{}
	return &this
}

// GetTimeEnd returns the TimeEnd field value if set, zero value otherwise.
func (o *V0040InstanceTime) GetTimeEnd() int64 {
	if o == nil || IsNil(o.TimeEnd) {
		var ret int64
		return ret
	}
	return *o.TimeEnd
}

// GetTimeEndOk returns a tuple with the TimeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040InstanceTime) GetTimeEndOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeEnd) {
		return nil, false
	}
	return o.TimeEnd, true
}

// HasTimeEnd returns a boolean if a field has been set.
func (o *V0040InstanceTime) HasTimeEnd() bool {
	if o != nil && !IsNil(o.TimeEnd) {
		return true
	}

	return false
}

// SetTimeEnd gets a reference to the given int64 and assigns it to the TimeEnd field.
func (o *V0040InstanceTime) SetTimeEnd(v int64) {
	o.TimeEnd = &v
}

// GetTimeStart returns the TimeStart field value if set, zero value otherwise.
func (o *V0040InstanceTime) GetTimeStart() int64 {
	if o == nil || IsNil(o.TimeStart) {
		var ret int64
		return ret
	}
	return *o.TimeStart
}

// GetTimeStartOk returns a tuple with the TimeStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040InstanceTime) GetTimeStartOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeStart) {
		return nil, false
	}
	return o.TimeStart, true
}

// HasTimeStart returns a boolean if a field has been set.
func (o *V0040InstanceTime) HasTimeStart() bool {
	if o != nil && !IsNil(o.TimeStart) {
		return true
	}

	return false
}

// SetTimeStart gets a reference to the given int64 and assigns it to the TimeStart field.
func (o *V0040InstanceTime) SetTimeStart(v int64) {
	o.TimeStart = &v
}

func (o V0040InstanceTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0040InstanceTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeEnd) {
		toSerialize["time_end"] = o.TimeEnd
	}
	if !IsNil(o.TimeStart) {
		toSerialize["time_start"] = o.TimeStart
	}
	return toSerialize, nil
}

type NullableV0040InstanceTime struct {
	value *V0040InstanceTime
	isSet bool
}

func (v NullableV0040InstanceTime) Get() *V0040InstanceTime {
	return v.value
}

func (v *NullableV0040InstanceTime) Set(val *V0040InstanceTime) {
	v.value = val
	v.isSet = true
}

func (v NullableV0040InstanceTime) IsSet() bool {
	return v.isSet
}

func (v *NullableV0040InstanceTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0040InstanceTime(val *V0040InstanceTime) *NullableV0040InstanceTime {
	return &NullableV0040InstanceTime{value: val, isSet: true}
}

func (v NullableV0040InstanceTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0040InstanceTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


