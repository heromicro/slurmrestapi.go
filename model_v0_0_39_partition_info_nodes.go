/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0039PartitionInfoNodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0039PartitionInfoNodes{}

// V0039PartitionInfoNodes struct for V0039PartitionInfoNodes
type V0039PartitionInfoNodes struct {
	AllowedAllocation *string `json:"allowed_allocation,omitempty"`
	Configured *string `json:"configured,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// NewV0039PartitionInfoNodes instantiates a new V0039PartitionInfoNodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0039PartitionInfoNodes() *V0039PartitionInfoNodes {
	this := V0039PartitionInfoNodes{}
	return &this
}

// NewV0039PartitionInfoNodesWithDefaults instantiates a new V0039PartitionInfoNodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0039PartitionInfoNodesWithDefaults() *V0039PartitionInfoNodes {
	this := V0039PartitionInfoNodes{}
	return &this
}

// GetAllowedAllocation returns the AllowedAllocation field value if set, zero value otherwise.
func (o *V0039PartitionInfoNodes) GetAllowedAllocation() string {
	if o == nil || IsNil(o.AllowedAllocation) {
		var ret string
		return ret
	}
	return *o.AllowedAllocation
}

// GetAllowedAllocationOk returns a tuple with the AllowedAllocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039PartitionInfoNodes) GetAllowedAllocationOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedAllocation) {
		return nil, false
	}
	return o.AllowedAllocation, true
}

// HasAllowedAllocation returns a boolean if a field has been set.
func (o *V0039PartitionInfoNodes) HasAllowedAllocation() bool {
	if o != nil && !IsNil(o.AllowedAllocation) {
		return true
	}

	return false
}

// SetAllowedAllocation gets a reference to the given string and assigns it to the AllowedAllocation field.
func (o *V0039PartitionInfoNodes) SetAllowedAllocation(v string) {
	o.AllowedAllocation = &v
}

// GetConfigured returns the Configured field value if set, zero value otherwise.
func (o *V0039PartitionInfoNodes) GetConfigured() string {
	if o == nil || IsNil(o.Configured) {
		var ret string
		return ret
	}
	return *o.Configured
}

// GetConfiguredOk returns a tuple with the Configured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039PartitionInfoNodes) GetConfiguredOk() (*string, bool) {
	if o == nil || IsNil(o.Configured) {
		return nil, false
	}
	return o.Configured, true
}

// HasConfigured returns a boolean if a field has been set.
func (o *V0039PartitionInfoNodes) HasConfigured() bool {
	if o != nil && !IsNil(o.Configured) {
		return true
	}

	return false
}

// SetConfigured gets a reference to the given string and assigns it to the Configured field.
func (o *V0039PartitionInfoNodes) SetConfigured(v string) {
	o.Configured = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *V0039PartitionInfoNodes) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039PartitionInfoNodes) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *V0039PartitionInfoNodes) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *V0039PartitionInfoNodes) SetTotal(v int32) {
	o.Total = &v
}

func (o V0039PartitionInfoNodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0039PartitionInfoNodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedAllocation) {
		toSerialize["allowed_allocation"] = o.AllowedAllocation
	}
	if !IsNil(o.Configured) {
		toSerialize["configured"] = o.Configured
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableV0039PartitionInfoNodes struct {
	value *V0039PartitionInfoNodes
	isSet bool
}

func (v NullableV0039PartitionInfoNodes) Get() *V0039PartitionInfoNodes {
	return v.value
}

func (v *NullableV0039PartitionInfoNodes) Set(val *V0039PartitionInfoNodes) {
	v.value = val
	v.isSet = true
}

func (v NullableV0039PartitionInfoNodes) IsSet() bool {
	return v.isSet
}

func (v *NullableV0039PartitionInfoNodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0039PartitionInfoNodes(val *V0039PartitionInfoNodes) *NullableV0039PartitionInfoNodes {
	return &NullableV0039PartitionInfoNodes{value: val, isSet: true}
}

func (v NullableV0039PartitionInfoNodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0039PartitionInfoNodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


