/*
Slurm Rest API

API to access and control Slurm.

API version: 0.0.40
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V0040AssocShort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0040AssocShort{}

// V0040AssocShort struct for V0040AssocShort
type V0040AssocShort struct {
	// Association account (if assigned)
	Account *string `json:"account,omitempty"`
	// Association cluster (if assigned)
	Cluster *string `json:"cluster,omitempty"`
	// Association partition (if assigned)
	Partition *string `json:"partition,omitempty"`
	// Assocation user (if assigned)
	User string `json:"user"`
	// Numeric Association ID (if known)
	Id *int32 `json:"id,omitempty"`
}

type _V0040AssocShort V0040AssocShort

// NewV0040AssocShort instantiates a new V0040AssocShort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0040AssocShort(user string) *V0040AssocShort {
	this := V0040AssocShort{}
	this.User = user
	return &this
}

// NewV0040AssocShortWithDefaults instantiates a new V0040AssocShort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0040AssocShortWithDefaults() *V0040AssocShort {
	this := V0040AssocShort{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *V0040AssocShort) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040AssocShort) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *V0040AssocShort) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *V0040AssocShort) SetAccount(v string) {
	o.Account = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *V0040AssocShort) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040AssocShort) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *V0040AssocShort) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *V0040AssocShort) SetCluster(v string) {
	o.Cluster = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *V0040AssocShort) GetPartition() string {
	if o == nil || IsNil(o.Partition) {
		var ret string
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040AssocShort) GetPartitionOk() (*string, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *V0040AssocShort) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given string and assigns it to the Partition field.
func (o *V0040AssocShort) SetPartition(v string) {
	o.Partition = &v
}

// GetUser returns the User field value
func (o *V0040AssocShort) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *V0040AssocShort) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *V0040AssocShort) SetUser(v string) {
	o.User = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V0040AssocShort) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040AssocShort) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V0040AssocShort) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *V0040AssocShort) SetId(v int32) {
	o.Id = &v
}

func (o V0040AssocShort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0040AssocShort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	toSerialize["user"] = o.User
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *V0040AssocShort) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0040AssocShort := _V0040AssocShort{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV0040AssocShort)

	if err != nil {
		return err
	}

	*o = V0040AssocShort(varV0040AssocShort)

	return err
}

type NullableV0040AssocShort struct {
	value *V0040AssocShort
	isSet bool
}

func (v NullableV0040AssocShort) Get() *V0040AssocShort {
	return v.value
}

func (v *NullableV0040AssocShort) Set(val *V0040AssocShort) {
	v.value = val
	v.isSet = true
}

func (v NullableV0040AssocShort) IsSet() bool {
	return v.isSet
}

func (v *NullableV0040AssocShort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0040AssocShort(val *V0040AssocShort) *NullableV0040AssocShort {
	return &NullableV0040AssocShort{value: val, isSet: true}
}

func (v NullableV0040AssocShort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0040AssocShort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


