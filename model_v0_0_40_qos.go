/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0040Qos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0040Qos{}

// V0040Qos struct for V0040Qos
type V0040Qos struct {
	Description *string `json:"description,omitempty"`
	Flags []string `json:"flags,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Limits *V0040QosLimits `json:"limits,omitempty"`
	Name *string `json:"name,omitempty"`
	Preempt *V0040QosPreempt `json:"preempt,omitempty"`
	Priority *V0040Uint32NoVal `json:"priority,omitempty"`
	UsageFactor *V0040Float64NoVal `json:"usage_factor,omitempty"`
	UsageThreshold *V0040Float64NoVal `json:"usage_threshold,omitempty"`
}

// NewV0040Qos instantiates a new V0040Qos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0040Qos() *V0040Qos {
	this := V0040Qos{}
	return &this
}

// NewV0040QosWithDefaults instantiates a new V0040Qos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0040QosWithDefaults() *V0040Qos {
	this := V0040Qos{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V0040Qos) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V0040Qos) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V0040Qos) SetDescription(v string) {
	o.Description = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *V0040Qos) GetFlags() []string {
	if o == nil || IsNil(o.Flags) {
		var ret []string
		return ret
	}
	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetFlagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Flags) {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *V0040Qos) HasFlags() bool {
	if o != nil && !IsNil(o.Flags) {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *V0040Qos) SetFlags(v []string) {
	o.Flags = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V0040Qos) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V0040Qos) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *V0040Qos) SetId(v int32) {
	o.Id = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *V0040Qos) GetLimits() V0040QosLimits {
	if o == nil || IsNil(o.Limits) {
		var ret V0040QosLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetLimitsOk() (*V0040QosLimits, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *V0040Qos) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given V0040QosLimits and assigns it to the Limits field.
func (o *V0040Qos) SetLimits(v V0040QosLimits) {
	o.Limits = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V0040Qos) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V0040Qos) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V0040Qos) SetName(v string) {
	o.Name = &v
}

// GetPreempt returns the Preempt field value if set, zero value otherwise.
func (o *V0040Qos) GetPreempt() V0040QosPreempt {
	if o == nil || IsNil(o.Preempt) {
		var ret V0040QosPreempt
		return ret
	}
	return *o.Preempt
}

// GetPreemptOk returns a tuple with the Preempt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetPreemptOk() (*V0040QosPreempt, bool) {
	if o == nil || IsNil(o.Preempt) {
		return nil, false
	}
	return o.Preempt, true
}

// HasPreempt returns a boolean if a field has been set.
func (o *V0040Qos) HasPreempt() bool {
	if o != nil && !IsNil(o.Preempt) {
		return true
	}

	return false
}

// SetPreempt gets a reference to the given V0040QosPreempt and assigns it to the Preempt field.
func (o *V0040Qos) SetPreempt(v V0040QosPreempt) {
	o.Preempt = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *V0040Qos) GetPriority() V0040Uint32NoVal {
	if o == nil || IsNil(o.Priority) {
		var ret V0040Uint32NoVal
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetPriorityOk() (*V0040Uint32NoVal, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *V0040Qos) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given V0040Uint32NoVal and assigns it to the Priority field.
func (o *V0040Qos) SetPriority(v V0040Uint32NoVal) {
	o.Priority = &v
}

// GetUsageFactor returns the UsageFactor field value if set, zero value otherwise.
func (o *V0040Qos) GetUsageFactor() V0040Float64NoVal {
	if o == nil || IsNil(o.UsageFactor) {
		var ret V0040Float64NoVal
		return ret
	}
	return *o.UsageFactor
}

// GetUsageFactorOk returns a tuple with the UsageFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetUsageFactorOk() (*V0040Float64NoVal, bool) {
	if o == nil || IsNil(o.UsageFactor) {
		return nil, false
	}
	return o.UsageFactor, true
}

// HasUsageFactor returns a boolean if a field has been set.
func (o *V0040Qos) HasUsageFactor() bool {
	if o != nil && !IsNil(o.UsageFactor) {
		return true
	}

	return false
}

// SetUsageFactor gets a reference to the given V0040Float64NoVal and assigns it to the UsageFactor field.
func (o *V0040Qos) SetUsageFactor(v V0040Float64NoVal) {
	o.UsageFactor = &v
}

// GetUsageThreshold returns the UsageThreshold field value if set, zero value otherwise.
func (o *V0040Qos) GetUsageThreshold() V0040Float64NoVal {
	if o == nil || IsNil(o.UsageThreshold) {
		var ret V0040Float64NoVal
		return ret
	}
	return *o.UsageThreshold
}

// GetUsageThresholdOk returns a tuple with the UsageThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040Qos) GetUsageThresholdOk() (*V0040Float64NoVal, bool) {
	if o == nil || IsNil(o.UsageThreshold) {
		return nil, false
	}
	return o.UsageThreshold, true
}

// HasUsageThreshold returns a boolean if a field has been set.
func (o *V0040Qos) HasUsageThreshold() bool {
	if o != nil && !IsNil(o.UsageThreshold) {
		return true
	}

	return false
}

// SetUsageThreshold gets a reference to the given V0040Float64NoVal and assigns it to the UsageThreshold field.
func (o *V0040Qos) SetUsageThreshold(v V0040Float64NoVal) {
	o.UsageThreshold = &v
}

func (o V0040Qos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0040Qos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Flags) {
		toSerialize["flags"] = o.Flags
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Preempt) {
		toSerialize["preempt"] = o.Preempt
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.UsageFactor) {
		toSerialize["usage_factor"] = o.UsageFactor
	}
	if !IsNil(o.UsageThreshold) {
		toSerialize["usage_threshold"] = o.UsageThreshold
	}
	return toSerialize, nil
}

type NullableV0040Qos struct {
	value *V0040Qos
	isSet bool
}

func (v NullableV0040Qos) Get() *V0040Qos {
	return v.value
}

func (v *NullableV0040Qos) Set(val *V0040Qos) {
	v.value = val
	v.isSet = true
}

func (v NullableV0040Qos) IsSet() bool {
	return v.isSet
}

func (v *NullableV0040Qos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0040Qos(val *V0040Qos) *NullableV0040Qos {
	return &NullableV0040Qos{value: val, isSet: true}
}

func (v NullableV0040Qos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0040Qos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


