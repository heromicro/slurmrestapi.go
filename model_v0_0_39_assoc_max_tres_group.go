/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0039AssocMaxTresGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0039AssocMaxTresGroup{}

// V0039AssocMaxTresGroup struct for V0039AssocMaxTresGroup
type V0039AssocMaxTresGroup struct {
	Minutes []V0039Tres `json:"minutes,omitempty"`
	Active []V0039Tres `json:"active,omitempty"`
}

// NewV0039AssocMaxTresGroup instantiates a new V0039AssocMaxTresGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0039AssocMaxTresGroup() *V0039AssocMaxTresGroup {
	this := V0039AssocMaxTresGroup{}
	return &this
}

// NewV0039AssocMaxTresGroupWithDefaults instantiates a new V0039AssocMaxTresGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0039AssocMaxTresGroupWithDefaults() *V0039AssocMaxTresGroup {
	this := V0039AssocMaxTresGroup{}
	return &this
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *V0039AssocMaxTresGroup) GetMinutes() []V0039Tres {
	if o == nil || IsNil(o.Minutes) {
		var ret []V0039Tres
		return ret
	}
	return o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039AssocMaxTresGroup) GetMinutesOk() ([]V0039Tres, bool) {
	if o == nil || IsNil(o.Minutes) {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *V0039AssocMaxTresGroup) HasMinutes() bool {
	if o != nil && !IsNil(o.Minutes) {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given []V0039Tres and assigns it to the Minutes field.
func (o *V0039AssocMaxTresGroup) SetMinutes(v []V0039Tres) {
	o.Minutes = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *V0039AssocMaxTresGroup) GetActive() []V0039Tres {
	if o == nil || IsNil(o.Active) {
		var ret []V0039Tres
		return ret
	}
	return o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039AssocMaxTresGroup) GetActiveOk() ([]V0039Tres, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *V0039AssocMaxTresGroup) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given []V0039Tres and assigns it to the Active field.
func (o *V0039AssocMaxTresGroup) SetActive(v []V0039Tres) {
	o.Active = v
}

func (o V0039AssocMaxTresGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0039AssocMaxTresGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Minutes) {
		toSerialize["minutes"] = o.Minutes
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableV0039AssocMaxTresGroup struct {
	value *V0039AssocMaxTresGroup
	isSet bool
}

func (v NullableV0039AssocMaxTresGroup) Get() *V0039AssocMaxTresGroup {
	return v.value
}

func (v *NullableV0039AssocMaxTresGroup) Set(val *V0039AssocMaxTresGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableV0039AssocMaxTresGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableV0039AssocMaxTresGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0039AssocMaxTresGroup(val *V0039AssocMaxTresGroup) *NullableV0039AssocMaxTresGroup {
	return &NullableV0039AssocMaxTresGroup{value: val, isSet: true}
}

func (v NullableV0039AssocMaxTresGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0039AssocMaxTresGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


