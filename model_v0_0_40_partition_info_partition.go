/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0040PartitionInfoPartition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0040PartitionInfoPartition{}

// V0040PartitionInfoPartition struct for V0040PartitionInfoPartition
type V0040PartitionInfoPartition struct {
	State []string `json:"state,omitempty"`
}

// NewV0040PartitionInfoPartition instantiates a new V0040PartitionInfoPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0040PartitionInfoPartition() *V0040PartitionInfoPartition {
	this := V0040PartitionInfoPartition{}
	return &this
}

// NewV0040PartitionInfoPartitionWithDefaults instantiates a new V0040PartitionInfoPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0040PartitionInfoPartitionWithDefaults() *V0040PartitionInfoPartition {
	this := V0040PartitionInfoPartition{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *V0040PartitionInfoPartition) GetState() []string {
	if o == nil || IsNil(o.State) {
		var ret []string
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfoPartition) GetStateOk() ([]string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *V0040PartitionInfoPartition) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given []string and assigns it to the State field.
func (o *V0040PartitionInfoPartition) SetState(v []string) {
	o.State = v
}

func (o V0040PartitionInfoPartition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0040PartitionInfoPartition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableV0040PartitionInfoPartition struct {
	value *V0040PartitionInfoPartition
	isSet bool
}

func (v NullableV0040PartitionInfoPartition) Get() *V0040PartitionInfoPartition {
	return v.value
}

func (v *NullableV0040PartitionInfoPartition) Set(val *V0040PartitionInfoPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableV0040PartitionInfoPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableV0040PartitionInfoPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0040PartitionInfoPartition(val *V0040PartitionInfoPartition) *NullableV0040PartitionInfoPartition {
	return &NullableV0040PartitionInfoPartition{value: val, isSet: true}
}

func (v NullableV0040PartitionInfoPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0040PartitionInfoPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


