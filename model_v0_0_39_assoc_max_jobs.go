/*
Slurm Rest API

API to access and control Slurm.

API version: Slurm-23.11.1&openapi/v0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.38&openapi/dbv0.0.38&openapi/dbv0.0.39
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0039AssocMaxJobs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0039AssocMaxJobs{}

// V0039AssocMaxJobs struct for V0039AssocMaxJobs
type V0039AssocMaxJobs struct {
	Per *V0039AssocMaxJobsPer `json:"per,omitempty"`
	Active *V0039Uint32NoVal `json:"active,omitempty"`
	Accruing *V0039Uint32NoVal `json:"accruing,omitempty"`
	Total *V0039Uint32NoVal `json:"total,omitempty"`
}

// NewV0039AssocMaxJobs instantiates a new V0039AssocMaxJobs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0039AssocMaxJobs() *V0039AssocMaxJobs {
	this := V0039AssocMaxJobs{}
	return &this
}

// NewV0039AssocMaxJobsWithDefaults instantiates a new V0039AssocMaxJobs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0039AssocMaxJobsWithDefaults() *V0039AssocMaxJobs {
	this := V0039AssocMaxJobs{}
	return &this
}

// GetPer returns the Per field value if set, zero value otherwise.
func (o *V0039AssocMaxJobs) GetPer() V0039AssocMaxJobsPer {
	if o == nil || IsNil(o.Per) {
		var ret V0039AssocMaxJobsPer
		return ret
	}
	return *o.Per
}

// GetPerOk returns a tuple with the Per field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039AssocMaxJobs) GetPerOk() (*V0039AssocMaxJobsPer, bool) {
	if o == nil || IsNil(o.Per) {
		return nil, false
	}
	return o.Per, true
}

// HasPer returns a boolean if a field has been set.
func (o *V0039AssocMaxJobs) HasPer() bool {
	if o != nil && !IsNil(o.Per) {
		return true
	}

	return false
}

// SetPer gets a reference to the given V0039AssocMaxJobsPer and assigns it to the Per field.
func (o *V0039AssocMaxJobs) SetPer(v V0039AssocMaxJobsPer) {
	o.Per = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *V0039AssocMaxJobs) GetActive() V0039Uint32NoVal {
	if o == nil || IsNil(o.Active) {
		var ret V0039Uint32NoVal
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039AssocMaxJobs) GetActiveOk() (*V0039Uint32NoVal, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *V0039AssocMaxJobs) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given V0039Uint32NoVal and assigns it to the Active field.
func (o *V0039AssocMaxJobs) SetActive(v V0039Uint32NoVal) {
	o.Active = &v
}

// GetAccruing returns the Accruing field value if set, zero value otherwise.
func (o *V0039AssocMaxJobs) GetAccruing() V0039Uint32NoVal {
	if o == nil || IsNil(o.Accruing) {
		var ret V0039Uint32NoVal
		return ret
	}
	return *o.Accruing
}

// GetAccruingOk returns a tuple with the Accruing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039AssocMaxJobs) GetAccruingOk() (*V0039Uint32NoVal, bool) {
	if o == nil || IsNil(o.Accruing) {
		return nil, false
	}
	return o.Accruing, true
}

// HasAccruing returns a boolean if a field has been set.
func (o *V0039AssocMaxJobs) HasAccruing() bool {
	if o != nil && !IsNil(o.Accruing) {
		return true
	}

	return false
}

// SetAccruing gets a reference to the given V0039Uint32NoVal and assigns it to the Accruing field.
func (o *V0039AssocMaxJobs) SetAccruing(v V0039Uint32NoVal) {
	o.Accruing = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *V0039AssocMaxJobs) GetTotal() V0039Uint32NoVal {
	if o == nil || IsNil(o.Total) {
		var ret V0039Uint32NoVal
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0039AssocMaxJobs) GetTotalOk() (*V0039Uint32NoVal, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *V0039AssocMaxJobs) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given V0039Uint32NoVal and assigns it to the Total field.
func (o *V0039AssocMaxJobs) SetTotal(v V0039Uint32NoVal) {
	o.Total = &v
}

func (o V0039AssocMaxJobs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0039AssocMaxJobs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Per) {
		toSerialize["per"] = o.Per
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Accruing) {
		toSerialize["accruing"] = o.Accruing
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableV0039AssocMaxJobs struct {
	value *V0039AssocMaxJobs
	isSet bool
}

func (v NullableV0039AssocMaxJobs) Get() *V0039AssocMaxJobs {
	return v.value
}

func (v *NullableV0039AssocMaxJobs) Set(val *V0039AssocMaxJobs) {
	v.value = val
	v.isSet = true
}

func (v NullableV0039AssocMaxJobs) IsSet() bool {
	return v.isSet
}

func (v *NullableV0039AssocMaxJobs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0039AssocMaxJobs(val *V0039AssocMaxJobs) *NullableV0039AssocMaxJobs {
	return &NullableV0039AssocMaxJobs{value: val, isSet: true}
}

func (v NullableV0039AssocMaxJobs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0039AssocMaxJobs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


