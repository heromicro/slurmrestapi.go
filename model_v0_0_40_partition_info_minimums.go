/*
Slurm Rest API

API to access and control Slurm.

API version: 0.0.40
Contact: sales@schedmd.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slurmrestapi

import (
	"encoding/json"
)

// checks if the V0040PartitionInfoMinimums type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0040PartitionInfoMinimums{}

// V0040PartitionInfoMinimums struct for V0040PartitionInfoMinimums
type V0040PartitionInfoMinimums struct {
	Nodes *int32 `json:"nodes,omitempty"`
}

// NewV0040PartitionInfoMinimums instantiates a new V0040PartitionInfoMinimums object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0040PartitionInfoMinimums() *V0040PartitionInfoMinimums {
	this := V0040PartitionInfoMinimums{}
	return &this
}

// NewV0040PartitionInfoMinimumsWithDefaults instantiates a new V0040PartitionInfoMinimums object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0040PartitionInfoMinimumsWithDefaults() *V0040PartitionInfoMinimums {
	this := V0040PartitionInfoMinimums{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *V0040PartitionInfoMinimums) GetNodes() int32 {
	if o == nil || IsNil(o.Nodes) {
		var ret int32
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0040PartitionInfoMinimums) GetNodesOk() (*int32, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *V0040PartitionInfoMinimums) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given int32 and assigns it to the Nodes field.
func (o *V0040PartitionInfoMinimums) SetNodes(v int32) {
	o.Nodes = &v
}

func (o V0040PartitionInfoMinimums) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0040PartitionInfoMinimums) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	return toSerialize, nil
}

type NullableV0040PartitionInfoMinimums struct {
	value *V0040PartitionInfoMinimums
	isSet bool
}

func (v NullableV0040PartitionInfoMinimums) Get() *V0040PartitionInfoMinimums {
	return v.value
}

func (v *NullableV0040PartitionInfoMinimums) Set(val *V0040PartitionInfoMinimums) {
	v.value = val
	v.isSet = true
}

func (v NullableV0040PartitionInfoMinimums) IsSet() bool {
	return v.isSet
}

func (v *NullableV0040PartitionInfoMinimums) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0040PartitionInfoMinimums(val *V0040PartitionInfoMinimums) *NullableV0040PartitionInfoMinimums {
	return &NullableV0040PartitionInfoMinimums{value: val, isSet: true}
}

func (v NullableV0040PartitionInfoMinimums) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0040PartitionInfoMinimums) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


